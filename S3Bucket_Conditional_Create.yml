AWSTemplateFormatVersion: '2010-09-09'
Description: "Modo: S3 Bucket Conditional Creator"

# Organizes How the Parameters appear in the CloudFormation Interface
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'S3 Bucket Parameters'
      Parameters:
      - S3Bucket
      - VersionedBucket
      - PurgeBucketOnDelete

Parameters:
###
# Bucket Name to conditionally create.  This solution implements something not otherwise allowed by
# CloudFormation AWS::S3::Bucket at this time - an ability to:
#   * Use an existing bucket with that name, if it already exists
#   * Create a bucket with that name if it does not already exist
# (With both cases being a SUCCESS in CloudFormation terms - no intervention, no failures)
###
  S3Bucket:
    Description: 'Name of the S3 Bucket to conditionally create'
    Type: String
    AllowedPattern: "[\\x20-\\x7E]*"
    Default: ''
###
# This is for creating buckets with versioning enabled (e.g. needed for CodePipeline Source Buckets)
# (NOTE: At this time, this only impacts new bucket creation scenarios, existing buckets aren't changed)
###
  VersionedBucket:
    Description: 'Should this bucket have versioning enabled?'
    Type: String
    AllowedValues:
      - 'TRUE'
      - 'FALSE'
    Default: 'TRUE'
###
# A key problem this solution fixes is that Cloudformation-created buckets fail to be removed from the account
# upon Stack Delete, causing the delete to fail and have to be re-run after you manually remove the bucket, or
# re-run in concert with clicking the check box to ignore the bucket resource.  This can delete everything in 
# that bucket, including versioned information, prior to doing the bucket delete call.  If purge-then-delete
# is your desired behavior, you now have a Cloudformation-supported way to get there without peskey predictable
# failures in stack creation or deletion. 
###
  PurgeBucketOnDelete:
    Description: 'Should this bucket be purged if non-empty at time of stack removal?'
    Type: String
    AllowedValues:
      - 'TRUE'
      - 'FALSE'
    Default: 'TRUE'


Resources:

### 
# We implement this by way of a Custom Cloudformation Resource tied to a Lambda function
# This changes how you utilize this in a few key ways vs the AWS::S3::Bucket approach.  The biggest is that if
# you want to refer to the Name of the bucket, you don't !Ref to the Resource name, but instead you do a call
# with !GetAtt <CustomResourceName>.Name, and made it easy to get the ARN by doing a !GetAtt for .ARN as well.
# Take a look at the Output section for an example!
#
# Aside from the use of GetAtt for name, the biggest difference between this and AWS::S3::Bucket are the limited
# functions I've done in this implementation (just Versioning, really, since it's all I personally needed.)  In
# addition I also really, really wanted this to stay within the 4096 limit of using Zipfile: | to inline a lambda
# within Cloudformation.  Since I am right up against this limit, it's also why I had to move almost all of my
# comments upstream into the CloudFormation of this reference implementation, so I had all the room available for
# logic (when I went to implement proper Stack Update handling, almost all of the python comments went bye-bye.)
# 
# As a result, this implementation doesn't support setting up Replication, Cors, Lifecycle, Logging, or Website
# parameters from AWS::S3::Bucket. If you implement any of them for your use, please feel free to submit patches 
# back and I'll add it to this reference implementation and share it forward to later adopters.  
###
  S3CondBucket:
    Type: "Custom::CreateS3BucketIfAbsent"
    Properties: 
      ServiceToken:
        !GetAtt S3BucketConditionalCreate.Arn
      BucketName: !Ref S3Bucket
      BucketRegion: !Sub '${AWS::Region}'
      BucketPurge: !Ref PurgeBucketOnDelete
      BucketVersioned: !Ref VersionedBucket

###
# This current implementation, using Zipfile: | inline attachment approach to lambda code.
###
  S3BucketConditionalCreate:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: index.handler
      FunctionName: !Sub 'S3ConditionalCreate-${S3Bucket}'
      Description:  'Check for existence of an S3 Bucket, create it if it does not exist'
      Role: !GetAtt S3BucketCreationLambdaRole.Arn
      MemorySize: 128
      Timeout: 30
      Runtime: python2.7
      Code:
        ZipFile: |
          import boto3
          import cfnresponse

          s3=boto3.client("s3")

          def conditionalCreateBucket(event, context):
            bucketName = event['ResourceProperties']['BucketName']
            versionedBucket = event['ResourceProperties']['BucketVersioned']
            resp = {'Status': "FAILED", 'Data': {'ARN': 'arn:aws:s3:::'+bucketName, 'Name': bucketName, 'LogGroup': context.log_group_name }}
            try:
              s3.head_bucket(Bucket=bucketName)
              print "Existing Bucket Found: ", bucketName, ", re-using."
              resp['Status']="SUCCESS"
              print resp
            # This is ugly, we need cleaner exception handling and to de-couple versioning from creation, but it works for now
            except:
              print "Bucket ",bucketName," does not exist, creating."
              try:
                s3.create_bucket(ACL='private',Bucket=bucketName)
                s3.get_waiter('bucket_exists').wait(Bucket=bucketName)
                print "Bucket ", bucketName, " created successfully"
                if versionedBucket == 'TRUE':
                  print "Enabling Bucket versioning on ",bucketName
                  try:
                    s3r = boto3.resource('s3')
                    bucket_versioning = s3r.BucketVersioning(bucketName)
                    bucket_versioning.enable()
                    print "Bucket versioning enabled on ",bucketName
                    resp['Status'] = "SUCCESS"
                  except:
                    print "Failed to add versioning to Bucket: ",bucketName
                else:
                  resp['Status'] = "SUCCESS"
              except Exception as e:
                print("Bucket ",bucketName, " failed to create: ", e.message)
                resp['Status'] = "FAILED"
            finally:
              return resp

          def deleteBucket(event, context):
            bucketName = event['ResourceProperties']['BucketName']
            bucketPurge = event['ResourceProperties']['BucketPurge']
            resp = {'Status': "FAILED", 'Data': {'ARN': 'arn:aws:s3:::'+bucketName, 'Name': bucketName, 'LogGroup': context.log_group_name }}
            try:
              bucket = boto3.resource("s3").Bucket(bucketName)
              if bucketPurge == 'TRUE':
                print "Purging Bucket: ",bucketName
                results=bucket.object_versions.all().delete()
                if len(results) > 0:
                  if results[0].has_key('Errors'):
                    print "Errors deleting:"
                    for item in results[0]["Errors"]:
                      print "---> ",item['Key']
                  if results[0].has_key('Deleted'):
                    print "Successfully deleted:"
                    for item in results[0]["Deleted"]:
                      print "---> ",item['Key']
              s3.delete_bucket(Bucket=bucketName)
              s3.get_waiter('bucket_not_exists').wait(Bucket=bucketName)
              print "Bucket ", bucketName, " removed successfully"
              resp['Status'] = "SUCCESS"
            except Exception as e: 
              print('Bucket resource unable to load, may already be deleted or you may not have access to it: ', e.message)
              resp['Status'] = "SUCCESS"
            finally:
              return resp

          def updateBucket(event, context):
            bucketName = event['ResourceProperties']['BucketName']
            resp = {'Status': "SUCCESS", 'Data': {'ARN': 'arn:aws:s3:::'+bucketName, 'Name': bucketName, 'LogGroup': context.log_group_name }}
            if (event['ResourceProperties']['BucketName'] != event['OldResourceProperties']['BucketName']):
              event['ResourceProperties']['BucketName']=event['OldResourceProperties']['BucketName']
              print "old event: ",event
              delresponse=deleteBucket(event,context)
              event['ResourceProperties']['BucketName']=bucketName
              print "new event: ",event
              crresponse=conditionalCreateBucket(event,context)
              if (delresponse['Status'] == 'FAILED' or crresponse['Status'] == 'FAILED'):
                resp['Status'] = "FAILED"
            return resp

          def handler(event, context):
            if event['RequestType'] == 'Create':
              response=conditionalCreateBucket(event,context)
              cfnresponse.send(event, context, response['Status'], response['Data'])
            if event['RequestType'] == 'Delete':
              response=deleteBucket(event,context)
              cfnresponse.send(event, context, response['Status'], response['Data'])
            if event['RequestType'] == 'Update':
              response=updateBucket(event,context)
              cfnresponse.send(event, context, response['Status'], response['Data'])


  S3BucketCreationLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
               - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: 'lambda-s3-conditional-creation-policy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:GetLogEvents
                - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"
              - Effect: Allow
                Action:
                - s3:ListBucket
                - s3:CreateBucket
                - s3:PutBucketVersioning
                - s3:DeleteBucket
                - s3:ListBucketVersions 
                Resource: !Sub "arn:aws:s3:::${S3Bucket}"
              - Effect: Allow
                Action:
                - s3:DeleteObject*
                Resource: !Sub "arn:aws:s3:::${S3Bucket}/*"

Outputs:
  BucketARN:
    Description: 'S3 Bucket ARN'
    Value: !GetAtt S3CondBucket.ARN
    Export:
      Name: !Sub '${AWS::StackName}-BucketARN'
  BucketName:
    Description: 'S3 Bucket Name'
    Value: !GetAtt S3CondBucket.Name
    Export:
      Name: !Sub '${AWS::StackName}-BucketName'
  BucketLogGroup:
    Description: 'Cloud Logs Log Group'
    Value: !GetAtt S3CondBucket.LogGroup
    Export:
      Name: !Sub '${AWS::StackName}-BucketLogGroup'
